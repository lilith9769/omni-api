syntax = "proto3";

package omni.v1beta1;

import "omni/v1beta1/types.proto";
import "omni/v1beta1/trade.proto";

// A request for quote (RFQ) sent by the trader
message QuoteRequest {
  // The blockchain of offer asset.
  Blockchain offer_blockchain = 1;

  // Blockchain-specific address of offer asset.
  string offer_asset_address = 2;

  // The blockchain of ask asset.
  Blockchain ask_blockchain = 3;

  // Blockchain-specific address of ask asset.
  string ask_asset_address = 4;

  // Either the amount of offer asset or ask asset.
  oneof amount {
    // The amount of offer asset the trader wants to pay, including all fees.
    string offer_units = 5;
    // The amount of ask asset the trader wants to get after all fees.
    string ask_units = 6;
  }

  // The address of referrer that will receive the fees.
  string referrer_address = 7;

  // The amount of fees required by the referrer in basis points (1/10000 or 0.01%)
  uint32 referrer_fee_bps = 8;

  // Supported methods of swap settlement.
  // The protocol limits settlement methods in quotes to specified methods.
  // Different combinations of offer & ask chains might support different methods.
  repeated SettlementMethod settlement_methods = 9;
}

//
message QuoteResponse {
  // ID of the quote generated by the platform
  string quote_id = 1;

  // The blockchain of offer asset.
  Blockchain offer_blockchain = 2;

  // Blockchain-specific address of offer asset.
  string offer_asset_address = 3;

  // The blockchain of ask asset.
  Blockchain ask_blockchain = 4;

  // Blockchain-specific address of ask asset.
  string ask_asset_address = 5;

  // The amount of offer asset the trader must pay, including all fees.
  string offer_units = 6;

  // The amount of ask asset the trader will get after all fees.
  string ask_units = 7;

  // The timestamp (UTC seconds) of Quote sent by resolver.
  sint64 quote_timestamp = 8;

  // The address of referrer that will receive the fees.
  string referrer_address = 9;

  // The amount of fees that the referrer will get (in units of `offer_asset_address`).
  string referrer_fee_units = 10;

  // The amount of fees charged by the protocol (in units of `offer_asset_address`).
  string protocol_fee_units = 11;

  // Additional parameters specific to settlement method.
  oneof swap_params {
    EscrowSettlementParams escrow = 21;
    //AtomicSettlementParams atomic = 22;
  }
}

// A request to track the status of specific trade
message TrackTradeRequest {
  // ID of the quote specified in QuoteResponse
  string quote_id = 1;

  // Index of the deposit within the contract specified in swap_params of `QuoteResponse`.
  uint64 deposit_index = 2;
}


service TraderGrpc {
  // Request for quote.
  //
  // The server sends the stream of quotes in response, so that each next quote overrides previous one.
  // This may occur either because the newer quote has better terms or because the older has expired.
  //
  // If there are no resolvers providing quotes for this request, empty stream is returned.
  // If there are no resolvers providing quotes after an old quote has expired, the server sends an empty
  // message (empty `qoute_id` & other fields).
  //
  // The client is responsible for interrupting connection when not interested in further updates
  // (either when starting the trade or because of cancelling the request).
  rpc Quote(QuoteRequest) returns (stream QuoteResponse) {}

  // Request to track settling of the trade
  //
  // The server immediately sends current status in response and then all updates to the status.
  //
  // The server only closes the stream in case of errors. If the stream is interrupted or closed by the server,
  // the client might reconnect to get further updates.
  //
  // The client should close the stream if it's not interested in further updates.
  rpc TrackTrade(TrackTradeRequest) returns (stream TradeStatus) {}
}
